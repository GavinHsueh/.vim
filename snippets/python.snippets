snippet #!
	#!/usr/bin/python3
snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet printf
	print(f"${1}")
snippet print
	print(${1})
snippet input
	input('${1}')
snippet while
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:var} in ${2:list}:
		${3}
# New Class
snippet class
	class ${1:ClassName}:
		"""${2}"""
		def __init__(self, ${3}):
			${4}
snippet sonclass
	class ${1:ClassName}(${2:super}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			super().__init__(${5:arg})}
# New Function
snippet def
	def ${1}(${2}):
		"""${3}"""
		${4}
snippet deff
	def ${1}(${2}):
		${3}
# New Method
snippet cdef
	def ${1}(self, ${2}):
		"""${3}"""
		${4}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet ..
	self.
snippet try
	try:
		${1:pass}
	except Exception as e:
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
snippet __
	__${1:init}__${2}
snippet open
	with open('${1}', '${2:r}', encoding = '${3:utf8}') as ${4:f}:
snippet selenium
	from selenium.webdriver import Chrome
	cd = Chrome()
	cd.set_window_size(1500, 1000)
	cd.implicitly_wait(10)
	cd.get('${1}')
snippet	zidian
	${1} = {
		${2}
		}
# 目录操作
snippet mkdir
	os.makedirs('${1}',exist_ok=True)
snippet rmfile
	os.remove('${1}')
snippet rmtree
	shutil.rmtree('${1}', ignore_errors=True)
snippet copyfile
	shutil.copyfile('${1:from}', '${2:to}')
snippet copytree
	shutil.copytree('${1:from}', '${2:to}')
snippet rename
	os.rename('${1}', '${2}')

# pyside2
snippet importpyside2
	from PySide2.QtWidgets import QApplication, QMessageBox, QMainWindow, QPushButton, QPlainTextEdit
snippet importqfile
	from PySide2.QtUiTools import QUiLoader
	from PySide2.QtCore import QFile
snippet qfile
	# 从文件中加载 UI 定义
	${1:UIFile} = QFile("${2:dir}")
	$1.open(QFile.ReadOnly)
	$1.close()

	self.ui = QUiLoader().load($1)
